/*============= ECE 488 project ========================================================================================
 *====Filename: SimpleBLEPrint
 *====Authors: Spencer Dodder
 *====Last updated: 03/14/2019
 *======================================================================================================================
 */

/*============= Dependencies ===========================================================================================
 *==== Arduino IDE
 *==== Wire.h
 *==== SPI.h
 *==== Adafruit_BLE.h
 *==== Adafruit_BluefruitLE_SPI.h
 *==== BluefruitConfig.h
 *======================================================================================================================
 */
 
/*============= Examples ===============================================================================================
 *====Expected output:
 *
  Adafruit Data Printing over bluetooth
  ------------------------------------------------
  Initialising the Bluefruit LE module: OK!
  Performing a factory reset: 
  AT+FACTORYRESET
  
  <- OK
  ATE=0
  
  <- OK
  Requesting Bluefruit info:
  ----------------
  BLESPIFRIEND
  nRF51822 0x00D6
  51C0F6ECB1ADC2AA
  0.8.0
  0.8.0
  Sep 25 2017
  S110 8.0.0, 0.2
  ----------------
  Please use Adafruit Bluefruit LE app to connect in UART mode
  Then Enter characters to send to Bluefruit
  
  ******************************
  Change LED activity to MODE
  Switching to DATA mode!
  ******************************
  33
  43
  -38
  29
  0
  8
  52
  -44
  -44
  19
  11
  51
  -57
  5
  8
  93
  30
  66
  69
  32
  17
  -53
  72
  -32
  80
  -77
  49
  92
  64
  69
  51
  -73
  90
  -76
  -65
  20
  44
  10
  -38
  -16
  63
  1
  10
  -64
  -24
  -69
  29
  97
  -25
  -9
  90
  44
 
 * the above is simply the list of random integers
 *======================================================================================================================
 */

/*============= Trouble Shooting =======================================================================================
 *==== If arbitray symbols are printed or other issues first check that the baud rate in the Serial Monitor window
 *==== matches baud rate that is set.
 *======================================================================================================================
 */

#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include "Adafruit_BLE.h"
#include "Adafruit_BluefruitLE_SPI.h"

#include "BluefruitConfig.h"

#if SOFTWARE_SERIAL_AVAILABLE
  #include <SoftwareSerial.h>
#endif

/*=========================================================================
    APPLICATION SETTINGS

    FACTORYRESET_ENABLE       Perform a factory reset when running this sketch
   
                              Enabling this will put your Bluefruit LE module
                              in a 'known good' state and clear any config
                              data set in previous sketches or projects, so
                              running this at least once is a good idea.
   
                              When deploying your project, however, you will
                              want to disable factory reset by setting this
                              value to 0.  If you are making changes to your
                              Bluefruit LE device via AT commands, and those
                              changes aren't persisting across resets, this
                              is the reason why.  Factory reset will erase
                              the non-volatile memory where config data is
                              stored, setting it back to factory default
                              values.
       
                              Some sketches that require you to bond to a
                              central device (HID mouse, keyboard, etc.)
                              won't work at all with this feature enabled
                              since the factory reset will clear all of the
                              bonding data stored on the chip, meaning the
                              central device won't be able to reconnect.
    MINIMUM_FIRMWARE_VERSION  Minimum firmware version to have some new features
    MODE_LED_BEHAVIOUR        LED activity, valid options are
                              "DISABLE" or "MODE" or "BLEUART" or
                              "HWUART"  or "SPI"  or "MANUAL"
    -----------------------------------------------------------------------*/
    #define FACTORYRESET_ENABLE         1
    #define MINIMUM_FIRMWARE_VERSION    "0.6.6"
    #define MODE_LED_BEHAVIOUR          "MODE"
/*=========================================================================*/

// Create the bluefruit object

/* ...hardware SPI, using SCK/MOSI/MISO hardware SPI pins and then user selected CS/IRQ/RST */
Adafruit_BluefruitLE_SPI ble(BLUEFRUIT_SPI_CS, BLUEFRUIT_SPI_IRQ, BLUEFRUIT_SPI_RST);

// A small helper
void error(const __FlashStringHelper*err) {
  Serial.println(err);
  while (1);
}
 
/**************************************************************************/
/*!
    @brief  Sets up the HW an the BLE module (this function is called
            automatically on startup)
*/
/**************************************************************************/
void setup(void)
{
  while (!Serial);  // required for Flora & Micro
  delay(500);

  Serial.begin(115200);
  Serial.println(F("Adafruit Data Printing over bluetooth"));
  Serial.println(F("------------------------------------------------"));

  /* Initialise the module */
  Serial.print(F("Initialising the Bluefruit LE module: "));

  if ( !ble.begin(VERBOSE_MODE) )
  {
    error(F("Couldn't find Bluefruit, make sure it's in CoMmanD mode & check wiring?"));
  }
  Serial.println( F("OK!") );

  if ( FACTORYRESET_ENABLE )
  {
    /* Perform a factory reset to make sure everything is in a known state */
    Serial.println(F("Performing a factory reset: "));
    if ( ! ble.factoryReset() ){
      error(F("Couldn't factory reset"));
    }
  }

  /* Disable command echo from Bluefruit */
  ble.echo(false);

  Serial.println("Requesting Bluefruit info:");
  /* Print Bluefruit information */
  ble.info();

  Serial.println(F("Please use Adafruit Bluefruit LE app to connect in UART mode"));
  Serial.println(F("Then Enter characters to send to Bluefruit"));
  Serial.println();

  ble.verbose(false);  // debug info is a little annoying after this point!

  /* Wait for connection */
  while (! ble.isConnected()) {
      delay(500);
  }

  Serial.println(F("******************************"));

  // LED Activity command is only supported from 0.6.6
  if ( ble.isVersionAtLeast(MINIMUM_FIRMWARE_VERSION) )
  {
    // Change Mode LED Activity
    Serial.println(F("Change LED activity to " MODE_LED_BEHAVIOUR));
    ble.sendCommandCheckOK("AT+HWModeLED=" MODE_LED_BEHAVIOUR);
  }

  // Set module to DATA mode
  Serial.println( F("Switching to DATA mode!") );
  ble.setMode(BLUEFRUIT_MODE_DATA);

  Serial.println(F("******************************"));
  
}


//Main loop for body of code
/*Prints a random sent of numbers to app
 * logic: create random int
 *        print int to app via bluetooth
 */
void loop(void)
{
  int randint = random(-100,100);
  // Send Data over
  
  ble.print((String) randint);    //print over bluetooth (must be cast as a string or char) 
  ble.println();                  //must have a line break for plotter
  Serial.println(randint);        //prints to Serial Monitor for debugging (also you can use Serial plotter to compare results)
  delay(100);                     //delay in miliseconds
  
}
